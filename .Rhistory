install.packages('tidyverse')
for(x in 1:100){
if(x%%10==0){
print(x)
}
}
if(81%%3==0){
print(x)
}
if(170%%3==0){
print(x)
}
if(1923%%3==0){
print(x)
}
if(3823%%3==0){
print(x)
}
if(81%%3==0){
print(x)
}
if(81%%3==0){
print('true')
}
if(81%%3==0){
print('true')
}
if(170%%3==0){
print('true')
}
if(1923%%3==0){
print('true')
}
if(3823%%3==0){
print('true')
}
if(81%%3==0){
print('true')
}
if(170%%3==0){
print('true')
}
if(81%%3==0){
print('true')
}
#install.packages('tidyverse')
if(81%%3==0){
print('true')
}
if(170%%3==0){
print('true')
}
if(1923%%3==0){
print('true')
}
if(3825%%3==0){
print('true')
}
if(81%%3==0){
print('true')
} else {print('false')}
if(170%%3==0){
print('true')
} else {print('false')}
if(1923%%3==0){
print('true')
} else {print('false')}
if(3825%%3==0){
print('true')
} else {print('false')}
if(81%%3==0){
print('true')
} else {print('false')}
if(170%%3==0){
print('true')
} else {print('false')}
if(1923%%3==0){
print('true')
} else {print('false')}
if(3825%%3==0){
print('true')
} else {print('false')}
if(81%%9==0){
print('true')
} else {print('false')}
if(170%%9==0){
print('true')
} else {print('false')}
if(1923%%9==0){
print('true')
} else {print('false')}
if(3825%%9==0){
print('true')
} else {print('false')}
w <- 8 + 1
x <- 1 + 7 + 0
y <- 1 + 9 + 2 + 3
z <- 3 + 8 + 2 + 5
for(i in w:z){
if(i%%3==0){
print('true')
}
}
if(9%%3==0){
print('true')
} else {print('false')}
if(8%%3==0){
print('true')
} else {print('false')}
if(15%%3==0){
print('true')
} else {print('false')}
if(18%%3==0){
print('true')
} else {print('false')}
if(9%%9==0){
print('true')
} else {print('false')}
if(8%%9==0){
print('true')
} else {print('false')}
if(15%%9==0){
print('true')
} else {print('false')}
if(18%%9==0){
print('true')
} else {print('false')}
w <- 8 + 1
x <- 1 + 7 + 0
y <- 1 + 9 + 2 + 3
z <- 3 + 8 + 2 + 5
print(w, x, y, z)
w <- 8 + 1
x <- 1 + 7 + 0
y <- 1 + 9 + 2 + 3
z <- 3 + 8 + 2 + 5
print(w)
w <- 8 + 1
x <- 1 + 7 + 0
y <- 1 + 9 + 2 + 3
z <- 3 + 8 + 2 + 5
print(w, x)
w <- 8 + 1
x <- 1 + 7 + 0
y <- 1 + 9 + 2 + 3
z <- 3 + 8 + 2 + 5
cat(w, x, y, z)
if(w%%3==0){
print('true')
} else {print('false')}
if(x%%3==0){
print('true')
} else {print('false')}
if(y%%3==0){
print('true')
} else {print('false')}
if(z%%3==0){
print('true')
} else {print('false')}
if(w%%9==0){
print('true')
} else {print('false')}
if(x%%9==0){
print('true')
} else {print('false')}
if(y%%9==0){
print('true')
} else {print('false')}
if(z%%9==0){
print('true')
} else {print('false')}
#install.packages('tidyverse')
# Define the vectors a, b, and c
a <- c(2, 4, 6)
b <- c(1, 3, 5)
c <- c(3, 5, 7)
# Initialize the product to 2
product <- 2
# Loop through the values of a from the 2nd to the 1000th element
for(i in 2:1000) {
# Calculate the current term of the product
term <- (a[i]/b[i-1]) * (a[i]/c[i-2])
# Multiply the term by the product
product <- product * term
}
# Print the result
product
product_fcn(2)
plot(cars)
data <- data(cars)
View(cars)
# head() displays the first 5 observations normally, but here we use the option n = 6 to display 6 instead
head(data, n = 6)
# the number of observations in a data set is equal to the number of rows, we can count the number of rows using nrow()
obs <- nrow(data)
# the number of variables is equal to the number of columns, we can this value similarly using ncol()
ncol(data)
View(cars)
# head() displays the first 5 observations normally, but here we use the option n = 6 to display 6 instead
head(data, n = 6)
# the number of observations in a data set is equal to the number of rows, we can count the number of rows using nrow()
obs <- nrow(data)
obs
# the number of variables is equal to the number of columns, we can this value similarly using ncol()
vars <- ncol(data)
vars
data(cars)
View(cars)
View(cars)
View(cars)
n_values <- seq(5, 500, by = 5)
products <- numeric(length(n_values))
for (i in seq_along(n_values)) {
products[i] <- calculate_product(n_values[i])
}
if(w%%3==0){
print('true')
} else {print('false')}
if(x%%3==0){
print('true')
} else {print('false')}
if(y%%3==0){
print('true')
} else {print('false')}
if(z%%3==0){
print('true')
} else {print('false')}
if(w%%9==0){
print('true')
} else {print('false')}
if(x%%9==0){
print('true')
} else {print('false')}
if(y%%9==0){
print('true')
} else {print('false')}
if(z%%9==0){
print('true')
} else {print('false')}
calculate_product <- function(n) {
# iterate over the range of values from 2 to 2n, incrementing by 2
for (i in seq(2, 2*n, by = 2)) {
# calculate the product of two fractions
fraction_product <- (i / (i - 1)) * (i / (i + 1))
# multiply the product variable by the fraction product
product <- 2 * fraction_product
}
# return the final product
return(product)
}
calculate_product(1791216)
calculate_product <- function(n) {
# initialize the product variable
product <- 2
# iterate over the range of values from 2 to 2n, incrementing by 2
for (i in seq(2, 2*n, by = 2)) {
# calculate the product of two fractions
fraction_product <- (i / (i - 1)) * (i / (i + 1))
# multiply the product variable by the fraction product
product <- product * fraction_product
}
# return the final product
return(product)
}
calculate_product(1791216)
product_fcn <- function(n) {
# must initialize variable first
result4 <- 2
# iterate from 2 to 2n, incrementing by 2
for (i in seq(2, 2*n, by = 2)) {
# e.g. for i = 2: (2/1) * (2/3), as required
product <- (i / (i - 1)) * (i / (i + 1))
result4 <- result4 * product
}
# return the final product
return(result4)
}
product_fcn(1791216)
# initialize the product variable
product <- 2
# iterate over the range of values from 2 to 1000, incrementing by 2
for (i in seq(2, 1000, by = 2)) {
# calculate the product of two fractions
fraction_product <- (i / (i - 1)) * (i / (i + 1))
# multiply the product variable by the fraction product
product <- product * fraction_product
}
# print the final product
cat("The product is:", product)
# must initialize variable first
result5 <- 2
# iterate from 2 to 2n, increment by 2
for (i in seq(2, 1000, by = 2)) {
# e.g. for i = 2: (2/1) * (2/3), as required
product <- (i / (i - 1)) * (i / (i + 1))
result5 <- result5 * product
}
# must initialize variable first
result5 <- 2
# iterate from 2 to 2n, increment by 2
for (i in seq(2, 1000, by = 2)) {
# e.g. for i = 2: (2/1) * (2/3), as required
product <- (i / (i - 1)) * (i / (i + 1))
result5 <- result5 * product
}
# must initialize variable first
result5 <- 2
# iterate from 2 to 2n, increment by 2
for (i in seq(2, 1000, by = 2)) {
# e.g. for i = 2: (2/1) * (2/3), as required
product <- (i / (i - 1)) * (i / (i + 1))
result5 <- result5 * product
}
result5
a <- c(2, 4, 6)
b <- c(1, 3, 5)
c <- c(3, 5, 7)
result1 <- 2 * prod((a/b) * (b/c))
result1
# must initialize variable first
result3 <- 2
# iterate from 2 to , increment by 2
for (i in seq(2, 1000, by = 2)) {
# e.g. for i = 2: (2/1) * (2/3), as required
product <- (i / (i - 1)) * (i / (i + 1))
result3 <- result3 * product
}
result3
product_fcn <- function(n) {
# initialize variable
result3 <- 2
# iterate from 2 to 2n, increment by 2
for (i in seq(2, 2*n, by = 2)) {
product <- (i / (i - 1)) * (i / (i + 1))
result3 <- result3 * product
}
# return the final product
return(result3)
}
product_fcn(1791216)
# create sequence defining the given values of n
n_val <- seq(5, 500, by = 5)
# must initialize vector to store values
products <- numeric(length(n_val))
# use seq_along() to pass through the values of n for each iteration
for (i in seq_along(n_val)) {
products[i] <- product_fcn(n_val[i])
}
# plot the value of each iteration
plot(products)
sessionInfo()
#install.packages('tidyverse')
sessionInfo()
